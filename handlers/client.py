from aiogram import types, Bot, executor, Dispatcher
from aiogram.types import ContentType, Message, InputFile
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from keyboards.client_kb import welcome_mrkup, price_mrkup_sedan, car_mrkup, create_btn, create_btn_mrkup_services, create_btn_liquid_glass
from utils.dbmanage.dbcontrol import client_exists, add_client_to_db, delete_client, get_name_client, get_price_wash, get_price_polish, get_price_dry_cleaner, get_price_prot_cover, \
    get_price_liquid_glass
import json
from loader import dp, bot
import os
from datetime import date



from dotenv import load_dotenv, find_dotenv
import io
import base64
from PIL import Image
import qrcode
from qrcode.image.pure import PyPNGImage
import cv2
import requests
import numpy

#—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–ª–µ—Ç qr-code
@dp.message_handler(content_types=ContentType.PHOTO)
async def send_photo_file_id(message: Message):   
    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Ç–µ–ª–µ–≥–∏ –∏ –∑–∞–ø–∏—Ö–∏–≤–∞–µ–º –µ–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–≤–∏–¥–µ –±–∞–π—Ç –∫–æ–¥–∞
    photo_file_id = message.photo[-1].file_id
    print(photo_file_id)
    file_photo = await bot.get_file(photo_file_id)
    file_path = file_photo.file_path
    url_info = f"https://api.telegram.org/file/bot{os.getenv('API_TOKEN')}/"
    img = requests.get(url_info+file_path)
    img_b = Image.open(io.BytesIO(img.content))
    #–∏–∑ –±–∞–π—Ç –∫–æ–¥–∞ –≤ –º–∞—Å—Å–∏–≤
    open_cv_image = numpy.array(img_b)
    #–¥–µ–∫–æ–¥–∏—Ä—É–µ–º qr-code
    detector = cv2.QRCodeDetector()
    data, bbox, straight_qrcode = detector.detectAndDecode(open_cv_image)
    print(data)
    print(bbox)
    
    if data == "":
        message_adm = "–û—à–∏–±–∫–∞ QR-code. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    if data.find("cry: ") == 0:
        message_adm = "QR-code. –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω."
        #####—Ä–∞–±–æ—Ç–∞ —Å –ë–î######
        to_BD_user = data[5:]
        print(to_BD_user)
        ######################
    else:
        message_adm = "–ù–µ–≤–µ—Ä–Ω—ã–π QR-code."

    await message.reply(text = message_adm)



'''
@dp.message_handler(text='/photo')
async def send_photo(message: Message):
    chat_id = message.from_user.id
    photo_file_id = 'AgACAgIAAxkBAAIHPmQM2gHzOytFDas1upT7Lj-8ElJbAAIsxzEbUL9oSL2yUcWqtICzAQADAgADbQADLwQ'
    await dp.bot.send_photo(chat_id=chat_id, photo=photo_file_id)
'''


@dp.message_handler(commands=['start'])
async def start_welcome(message: types.message):
    await bot.send_message(message.from_user.id, text=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}", 
                            reply_markup=welcome_mrkup)
    
    #add_client_to_db(0, 'trinux')
    #test = get_name_client("trinux")
    #if not client_exists(message.from_user.id):
    #add_client_to_db(message.from_user.id, message.from_user.username)
        
    #     await bot.send_message(message.from_user.id, text=f"Hello! {message.from_user.username}", 
    #                         reply_markup=welcome_mrkup)
    
    # else:
    #     await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏1 /help")
    



@dp.callback_query_handler(text="go_wash")
async def go_wash(callback: types.CallbackQuery):
    await callback.message.answer(text="–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–µ—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7(965)766-66-55")

@dp.callback_query_handler(text="qr_code")
async def qr_code(message: types.message):
    #–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Ñ–ª–∞–≥ –ª–∏–≥–∏—Ç–∏–º–Ω–æ—Å—Ç–∏ QR-code
    flag = "cry: "
    #—Å–æ–∑–¥–∞–µ–º QR-code –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–∏–ª
    qr = qrcode.QRCode(
    version=2,
    error_correction=qrcode.constants.ERROR_CORRECT_H,
    box_size=10,
    border=4,
    )
    qr.add_data(flag + message.from_user.first_name)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    print(os.getcwd())
    #os.makedirs("qrcode")
    img.save(r"qrcode/" + base64.b64encode(message.from_user.first_name.encode('UTF-8')).decode("UTF-8") + ".png")
    photo = InputFile(r"qrcode/" + base64.b64encode(message.from_user.first_name.encode('UTF-8')).decode("UTF-8") + ".png")

    await bot.send_photo(message.from_user.id, photo=photo)


    #await bot.send_photo(chat_id=message.from_user.id, photo=message.from_user.first_name)


@dp.callback_query_handler(text="car_mrkup")
async def go_cat(callback: types.CallbackQuery):
    await callback.message.answer(text="–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É!", reply_markup=car_mrkup)

cars_types = {"sedan": "—Å–µ–¥–∞–Ω", "cross": "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä", "vned": "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫", "microbus": "–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å"}

cars_service_types = {"moika_sedan": {1: "—Å–µ–¥–∞–Ω"}, "moika_cross": {2: "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä"}, "moika_vned": {3: "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"}, "moika_microbus": {4: "–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å"}}

cars_service_polish_types = {"polish_sedan": {1: "—Å–µ–¥–∞–Ω"}, "polish_cross": {2: "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä"}, "polish_vned": {3: "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"}, "polish_microbus": {4: "–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å"}}

cars_service_dry_cleaner_types = {"dry_cleaner_sedan": {1: "—Å–µ–¥–∞–Ω"}, "dry_cleaner_cross": {2: "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä"}, "dry_cleaner_vned": {3: "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"}, 
                                  "dry_cleaner_microbus": {4: "–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å"}}

cars_service_prot_cover_types = {"prot_cover_sedan": {1: "—Å–µ–¥–∞–Ω"}, "prot_cover_cross": {2: "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä"}, "prot_cover_vned": {3: "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"}, 
                                  "prot_cover_microbus": {4: "–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å"}}


@dp.callback_query_handler()
async def get_services_wash_car(callback: types.CallbackQuery):    
    if callback.data in cars_types.keys():
        await callback.message.answer(text=f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è {cars_types.get(callback.data)}–∞", 
                                      reply_markup=create_btn_mrkup_services(callback.data))
    elif callback.data in cars_service_types.keys():
        coast_mojka = get_price_wash([k for k in cars_service_types.get(callback.data).keys()][0])
        await callback.message.answer(text=f"<u>–¶–µ–Ω—ã üí∞ –Ω–∞ —É—Å–ª—É–≥—É <b>–ú–û–ô–ö–ê {[v for v in cars_service_types.get(callback.data).values()][0]}–∞</b></u> \n\
            \nüö∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –º–æ–π–∫–∞ - {coast_mojka[0]} —Ä—É–±–ª–µ–π \
            \nüö∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –º–æ–π–∫–∞ + —à–∞–º–ø—É–Ω—å - {coast_mojka[1]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ –∫—É–∑–æ–≤–∞ (—à–∞–º–ø—É–Ω—å + —Å—É—à–∫–∞) - {coast_mojka[2]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ –°–¢–ê–ù–î–ê–†–¢ (+ –º—ã—Ç—å–µ –∫–æ–≤—Ä–æ–≤) - {coast_mojka[3]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ ¬´LUX Express¬ª - {coast_mojka[4]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ ¬´LUX Classic¬ª - {coast_mojka[5]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ ¬´Premium¬ª - {coast_mojka[6]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ ¬´Premium Extra¬ª - {coast_mojka[7]} —Ä—É–±–ª–µ–π \
            \nüßπ –£–±–æ—Ä–∫–∞ —Å–∞–ª–æ–Ω–∞ - {coast_mojka[8]} —Ä—É–±–ª–µ–π \
            \nüßπ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å–µ–∫–æ–º—ã—Ö - {coast_mojka[9]} —Ä—É–±–ª–µ–π \
            \nüßπ –£–±–æ—Ä–∫–∞ —à–µ—Ä—Å—Ç–∏ - {coast_mojka[10]} —Ä—É–±–ª–µ–π \
            \nüßπ –£–±–æ—Ä–∫–∞ —Å–∞–ª–æ–Ω–∞ –ø—ã–ª–µ—Å–æ—Å–æ–º - {coast_mojka[11]} —Ä—É–±–ª–µ–π \
            \nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–∫–æ–ª –≤ —Å–∞–ª–æ–Ω–µ - {coast_mojka[12]} —Ä—É–±–ª–µ–π \
            \nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–∞ –≤ —Å–∞–ª–æ–Ω–µ - {coast_mojka[13]} —Ä—É–±–ª–µ–π \
            \nüßπ –£–±–æ—Ä–∫–∞ –±–∞–≥–∞–∂–Ω–∏–∫–∞ - {coast_mojka[14]} —Ä—É–±–ª–µ–π \
            \nüßπ –û–±–µ–∑–∂–∏—Ä–∏–≤–∞–Ω–∏–µ –∫—É–∑–æ–≤–∞ ¬´ANTI OIL¬ª - {coast_mojka[15]} —Ä—É–±–ª–µ–π \
            \nüßπ –£–¥–∞–ª–µ–Ω–∏–µ –±–∏—Ç—É–º–Ω—ã—Ö –ø—è—Ç–µ–Ω - {coast_mojka[16]} —Ä—É–±–ª–µ–π \
            \nüíß –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∫–æ–∂–∏ Luxe - {coast_mojka[17]} —Ä—É–±–ª–µ–π \
            \nüíß –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∫–æ–∂–∏ Premium - {coast_mojka[18]} —Ä—É–±–ª–µ–π \
            \nüíß –°–∏–ª–∏–∫–æ–Ω–æ–≤–∞—è —Å–º–∞–∑–∫–∞ + —Å–º–∞–∑–∫–∞ –∑–∞–º–∫–æ–≤ - {coast_mojka[19]} —Ä—É–±–ª–µ–π \
            \nüßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–µ—Å–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ (1 –∫–æ–ª–µ—Å–æ) - {coast_mojka[20]} —Ä—É–±–ª–µ–π \
            \nüßπ –ß–µ—Ä–Ω–µ–Ω–∏–µ —Ä–µ–∑–∏–Ω—ã - {coast_mojka[21]} —Ä—É–±–ª–µ–π \
            \nüíß –°—Ç–∏—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤ (1 —à—Ç.) - {coast_mojka[22]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç—Å–µ–∫–∞ - {coast_mojka[23]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ —Ä–µ–∑–∏–Ω–æ–≤—ã—Ö –∫–æ–≤—Ä–æ–≤ - {coast_mojka[24]} —Ä—É–±–ª–µ–π \
            \nüíß –ú–æ–π–∫–∞ –∫–æ–ª–µ—Å (4 —à—Ç.) - {coast_mojka[25]} —Ä—É–±–ª–µ–π", parse_mode="HTML")    # create_btn(get_price_wash([k for k in cars_service_types.get(callback.data).keys()][0]))
    elif callback.data in cars_service_polish_types.keys():
        coast_polish = get_price_polish([k for k in cars_service_polish_types.get(callback.data).keys()][0])
        await callback.message.answer(text=f"<u>–¶–µ–Ω—ã üí∞ –Ω–∞ —É—Å–ª—É–≥—É <b>–ü–û–õ–ò–†–û–í–ö–ê {[v for v in cars_service_polish_types.get(callback.data).values()][0]}–∞</b> </u>\n \
            \nüí¶ –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä (1 —Ñ–∞—Ä–∞) - {coast_polish[0]} —Ä—É–±–ª–µ–π \
            \nüí¶ –õ–µ–≥–∫–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞ (–≥–ª—è–Ω—Ü–µ–≤–∞—è) - {coast_polish[1]} —Ä—É–±–ª–µ–π \
            \nüí¶ –ì–ª—É–±–æ–∫–∞—è –∞–±—Ä–∞–∑–∏–≤–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞ –ó–ú - {coast_polish[2]} —Ä—É–±–ª–µ–π \
            \nüí¶ –ü–æ–ª–∏—Ä–æ–≤–∫–∞ 1 —ç–ª–µ–º–µ–Ω—Ç–∞ - {coast_polish[3]} —Ä—É–±–ª–µ–π \
            \nüí¶ –ê–Ω—Ç–∏-–¥–æ–∂–¥—å GLACO SOFT 99, (–ª–æ–±. —Å—Ç. + –ø–µ—Ä–µ–¥. —Å—Ç.) - {coast_polish[4]} —Ä—É–±–ª–µ–π \
            \nüí¶ –ê–Ω—Ç–∏-–¥–æ–∂–¥—å GLACO SOFT 99, (–≤—Å–µ —Å—Ç–µ–∫–ª–∞) - {coast_polish[5]} —Ä—É–±–ª–µ–π \
            \nüí¶ –ê–Ω—Ç–∏-–¥–æ–∂–¥—å Aquapel, (–ø–æ–ª—É—Å—Ñ–µ—Ä–∞) - {coast_polish[6]} —Ä—É–±–ª–µ–π", parse_mode="HTML")
    elif callback.data in cars_service_dry_cleaner_types.keys():
        await callback.message.answer(text=f"–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –•–ò–ú–ß–ò–°–¢–ö–ê {[v for v in cars_service_dry_cleaner_types.get(callback.data).values()][0]}–∞", 
                                      reply_markup=create_btn(get_price_dry_cleaner([k for k in cars_service_dry_cleaner_types.get(callback.data).keys()][0])))
    elif callback.data in cars_service_prot_cover_types.keys():
        await callback.message.answer(text=f"–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –ó–ê–©–ò–¢–ù–´–ï –ü–û–ö–†–´–¢–ò–Ø {[v for v in cars_service_prot_cover_types.get(callback.data).values()][0]}–∞", 
                                      reply_markup=create_btn(get_price_prot_cover([k for k in cars_service_prot_cover_types.get(callback.data).keys()][0])))
    elif callback.data == "liq_glass":
        await callback.message.answer(text=f"–ñ–∏–¥–∫–æ–µ —Å—Ç–µ–∫–ª–æ. \
                                \n–ü–æ–∫—Ä—ã—Ç–∏–µ –∫—É–∑–æ–≤–∞ –∂–∏–¥–∫–∏–º —Å—Ç–µ–∫–ª–æ–º H-7 Glass Coating (SOFT99, –Ø–ø–æ–Ω–∏—è) ‚Äì —Ü–µ–Ω–∞ –æ—Ç {get_price_liquid_glass(3)} —Ä—É–±–ª–µ–π.\
                                \nH7 –∂–∏–¥–∫–æ–µ —Å—Ç–µ–∫–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∑–∞—â–∏—Ç—É –∫—É–∑–æ–≤–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã: \
                                \n–æ—Å–∞–¥–∫–æ–≤ (–¥–æ–∂–¥—è, —Å–Ω–µ–≥–∞, –≥—Ä–∞–¥–∞), –≥—Ä—è–∑–∏, –º–æ—Ä—Å–∫–æ–π –≤–æ–¥—ã, —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∞ —Ç–∞–∫ –∂–µ –∞–±—Ä–∞–∑–∏–≤–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.", parse_mode="HTML",
                                reply_markup=create_btn_liquid_glass("–ñ–ò–î–ö–û–ï –°–¢–ï–ö–õ–û", get_price_liquid_glass(3), "liquid_glass"))
    elif callback.data == "presale":
        await callback.message.answer(text=f"–ü—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.\
                                \n–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ–¥—É—Ç –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –≤—ã—Å–æ—á–∞–π—à–µ–º —É—Ä–æ–≤–Ω–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫, \
                                \n—á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —É –í–∞—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–±–æ—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π! \
                                \n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π –≤–∏–¥ ‚Äì –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É. \
                                \n–¢–∞–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ü–µ–ª—ã–π –∫–æ–º–ø–ª–µ–∫—Å –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã. \
                                \n–ü—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ‚Äì —Ü–µ–Ω–∞ –æ—Ç 10 000 —Ä—É–±–ª–µ–π.", parse_mode="HTML",
                                reply_markup=create_btn_liquid_glass("–ü–†–ï–î–ü–†–û–î–ê–ñ–ù–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê", 10000, "presale_back"))
        

# @dp.callback_query_handler()
# async def get_services_wash_car(callback: types.CallbackQuery):    
#     if callback.data in cars_types.keys():
#         await callback.message.answer(text=f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è {cars_types.get(callback.data)}–∞", 
#                                       reply_markup=create_btn_mrkup_services(callback.data))
#     elif callback.data in cars_service_types.keys():
#         await callback.message.answer(text=f"–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –ú–û–ô–ö–ê {[v for v in cars_service_types.get(callback.data).values()][0]}–∞", 
#                                       reply_markup=create_btn(get_price_wash([k for k in cars_service_types.get(callback.data).keys()][0])))
#     elif callback.data in cars_service_polish_types.keys():
#         await callback.message.answer(text=f"–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –ü–û–õ–ò–†–û–í–ö–ê {[v for v in cars_service_polish_types.get(callback.data).values()][0]}–∞", 
#                                       reply_markup=create_btn(get_price_polish([k for k in cars_service_polish_types.get(callback.data).keys()][0])))
#     elif callback.data in cars_service_dry_cleaner_types.keys():
#         await callback.message.answer(text=f"–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –•–ò–ú–ß–ò–°–¢–ö–ê {[v for v in cars_service_dry_cleaner_types.get(callback.data).values()][0]}–∞", 
#                                       reply_markup=create_btn(get_price_dry_cleaner([k for k in cars_service_dry_cleaner_types.get(callback.data).keys()][0])))
#     elif callback.data in cars_service_prot_cover_types.keys():
#         await callback.message.answer(text=f"–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –ó–ê–©–ò–¢–ù–´–ï –ü–û–ö–†–´–¢–ò–Ø {[v for v in cars_service_prot_cover_types.get(callback.data).values()][0]}–∞", 
#                                       reply_markup=create_btn(get_price_prot_cover([k for k in cars_service_prot_cover_types.get(callback.data).keys()][0])))
#     elif callback.data == "liq_glass":
#         await callback.message.answer(text=f"–ñ–∏–¥–∫–æ–µ —Å—Ç–µ–∫–ª–æ. \
#                                 \n–ü–æ–∫—Ä—ã—Ç–∏–µ –∫—É–∑–æ–≤–∞ –∂–∏–¥–∫–∏–º —Å—Ç–µ–∫–ª–æ–º H-7 Glass Coating (SOFT99, –Ø–ø–æ–Ω–∏—è) ‚Äì —Ü–µ–Ω–∞ –æ—Ç {get_price_liquid_glass(3)} —Ä—É–±–ª–µ–π.\
#                                 \nH7 –∂–∏–¥–∫–æ–µ —Å—Ç–µ–∫–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∑–∞—â–∏—Ç—É –∫—É–∑–æ–≤–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã: \
#                                 \n–æ—Å–∞–¥–∫–æ–≤ (–¥–æ–∂–¥—è, —Å–Ω–µ–≥–∞, –≥—Ä–∞–¥–∞), –≥—Ä—è–∑–∏, –º–æ—Ä—Å–∫–æ–π –≤–æ–¥—ã, —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∞ —Ç–∞–∫ –∂–µ –∞–±—Ä–∞–∑–∏–≤–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.", parse_mode="HTML",
#                                 reply_markup=create_btn_liquid_glass("–ñ–ò–î–ö–û–ï –°–¢–ï–ö–õ–û", get_price_liquid_glass(3), "liquid_glass"))
#     elif callback.data == "presale":
#         await callback.message.answer(text=f"–ü—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.\
#                                 \n–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ–¥—É—Ç –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –≤—ã—Å–æ—á–∞–π—à–µ–º —É—Ä–æ–≤–Ω–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫, \
#                                 \n—á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —É –í–∞—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–±–æ—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π! \
#                                 \n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–π –≤–∏–¥ ‚Äì –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É. \
#                                 \n–¢–∞–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ü–µ–ª—ã–π –∫–æ–º–ø–ª–µ–∫—Å –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã. \
#                                 \n–ü—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ‚Äì —Ü–µ–Ω–∞ –æ—Ç 10 000 —Ä—É–±–ª–µ–π.", parse_mode="HTML",
#                                 reply_markup=create_btn_liquid_glass("–ü–†–ï–î–ü–†–û–î–ê–ñ–ù–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê", 10000, "presale_back"))


@dp.message_handler(commands=['quit'])
async def delete_client(message: types.message):
    delete_client(message.from_user.id)
    await bot.send_message(message.from_user.id, text="–ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç–µ. –ú—ã –∂–¥–µ–º –í–∞—Å —Å–Ω–æ–≤–∞.")


@dp.message_handler(commands=['location'])
async def info(message: types.message):
    await bot.send_message(message.from_user.id, text="–ö–æ–ª–æ–º—è–∂—Å–∫–∏–π –ø—Ä., –¥. 19 (—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ê–ó–° ¬´–õ–ò–ù–û–°¬ª)\n–í—ã–±–æ—Ä–≥—Å–∫–∞—è –Ω–∞–±., –¥. 57, –ª–∏—Ç. –ê (—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ê–ó–° ¬´–õ–ò–ù–û–°¬ª).")
    



